<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Henry&#39;s Blog</title>
 <link href="" rel="self"/>
 <link href=""/>
 <updated>2016-11-14T13:36:37+09:00</updated>
 <id></id>
 <author>
   <name>Henry</name>
   <email>coderguoh@gmail.com</email>
 </author>

 
 <entry>
   <title>python</title>
   <link href="/2016/10/30/python"/>
   <updated>2016-10-30T00:00:00+09:00</updated>
   <id>/2016/10/30/python</id>
   <content type="html">&lt;h1&gt;Histoy&lt;/h1&gt;

&lt;!--more--&gt;

&lt;h1&gt;Using&lt;/h1&gt;
&lt;h2&gt;String&lt;/h2&gt;
&lt;h3&gt;Mutiple String&lt;/h3&gt;
&lt;p&gt;&quot;python&quot; * 5  -&amp;gt; python python python python python&lt;/p&gt;
&lt;h2&gt;List&lt;/h2&gt;
&lt;h3&gt;Add more&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;
        testList = [11, 21, 31, 41]
        testList + [51, 61]   -&amp;gt; [11, 21, 31, 41, 51, 61]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;testList[:2]          -&amp;gt; [11, 21]&lt;/p&gt;
&lt;p&gt;testList[:2] = [0, 0] -&amp;gt; [0, 0, 31, 41, 51, 61]&lt;/p&gt;
&lt;p&gt;testList[:2] = []     -&amp;gt; [31, 41, 51, 61]&lt;/p&gt;
&lt;p&gt;&amp;lt;/code&amp;gt;&lt;/p&gt;
&lt;h2&gt;IF&lt;/h2&gt;
&lt;p&gt;if name is &quot;henry&quot;:&lt;br /&gt;
    print(&quot;This is henry&quot;)
&lt;/p&gt;
&lt;h2&gt;Function&lt;/h2&gt;
&lt;h3&gt;key word argument&lt;/h3&gt;
&lt;p&gt;def hello(name=&quot;henry&quot;, age=&quot;10&quot;):&lt;br /&gt;
print(&quot;I am&quot;, name, &quot;I am&quot;, age, &quot;years old!&quot;)
&lt;/p&gt;
&lt;h3&gt;Flexible argument&lt;/h3&gt;
&lt;p&gt;def hello(* args):&lt;br /&gt;
for arg in args:&lt;br /&gt;
pring(arg)&lt;br /&gt;
&lt;/p&gt;
&lt;h3&gt;Directory&lt;/h3&gt;
&lt;p&gt;directory = {&quot;name&quot; : &quot;henry&quot;, &quot;age&quot; : &quot;10&quot;}&lt;br /&gt;
for key, value in directory:
print(&quot;I am &quot; + directory[&quot;name&quot;] + &quot;, I am &quot; + directory[&quot;age&quot;] + &quot;years old&quot;)
&lt;/p&gt;
&lt;h1&gt;Demo&lt;/h1&gt;
&lt;h1&gt;Principle&lt;/h1&gt;
</content>
 </entry>
 
 <entry>
   <title>Ehcache Confirguration</title>
   <link href="/2016/10/26/EhCache"/>
   <updated>2016-10-26T00:00:00+09:00</updated>
   <id>/2016/10/26/EhCache</id>
   <content type="html">&lt;h1&gt;Configuration&lt;/h1&gt;
&lt;h2&gt;Expiration settings&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;timeToLivesSeconds - The maximum number of seconds an element can exist in the cache regardless of access&lt;/li&gt;
  &lt;li&gt;timeToIdleSeconds - The maximum number of seconds an element can exist in the cache without being accessed&lt;/li&gt;
  &lt;li&gt;eternal - when set to &quot;true&quot;, the expiration configuration of timetoLive and timeToIdle can take no place&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;h2&gt;Local sizing attributes&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;maxEntriesLocalHeap&lt;/li&gt;
  &lt;li&gt;maxBytesLocalHeap&lt;/li&gt;
  &lt;li&gt;maxEntriesLocalDisk&lt;/li&gt;
  &lt;li&gt;maxBytesLocalDisk&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Dynamic cache&lt;/h2&gt;
&lt;p&gt;In ehcache.xml you can disable dynamic configuration by setting the ehcache element&#39;s dynamicConfig attribute to &quot;false Memory Store&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;overflowToOffHeap - When an element is added to a cache and it goes beyond its maximum memory size, an existing element is either deletedm if overflow is not enabled, or evaluated for spooling to another tier, if overflow is enabled. memoryStoreEvbictionPolicy - the eviction of an item. legal values are LRU, LFU, FIFO
    &lt;ul&gt;
      &lt;li&gt;Least Recently Used(LRU) - LRU is the default setting. The last-used timestamp is updated when an element is put into the cache or an element is retrieved from the cache with a get call.&lt;/li&gt;
      &lt;li&gt;Least Frequently Used(LFU) - For each get call on the element the number of hits is updated. The lessw frequently used element is evicted&lt;/li&gt;
      &lt;li&gt;First In First OUt(FIFO) - Elements are evicted in the same order as they come in&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Disk Store&lt;/h2&gt;
&lt;p&gt;Only the serializable data can be placed in the disk store. Use &lt;diskstore&gt; element to config the path of disk store
&lt;ul&gt;
  &lt;li&gt;LocalTempSwap - The localTempSwap persistence strategy allows the memory store to overflow to disk when it becomes full. This option makes the disk a temporary store because overflow data dose not survive restarts or failures. when the node is restarted, any existing data on disk is cleared because it not designed to be reloaded. If the disk store path is not specified, a default path is used, the disk store creates a data file for eache cache on startup called &quot;cache_name.data&quot;&lt;/li&gt;
  &lt;li&gt;LocalRestartable - This option implements a restartable store for all in-memory data. After any restart, the data set is automatically reloaded from disk to the in-memory stores With the localTempSwap strategy, you can use maxEntriesLocalDisk or maxBytesLocalDisk at either the Cache or CacheManager level to control the size of the disk tier.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Disk Store Expiry and Eviction&lt;/h2&gt;
&lt;p&gt;Expired elements are eventually evicted to free up disk space. The element is also removed from the in-memory index of elements. One thread per cache is used to remove expired elements. The optional attribute diskExpiryThreadIntervalSeconds sets the interval between runs of the expiry thread. Setting diskExpiryThreadIntervalSeconds to a low value can cause excessive disk-store locking and high CPU utilization. The default value is 120 seconds. If a cache&#39;s disk store has a limited size, Elements will be evicted from the disk store
when it exceeds this limit. The LFU algorithm is used for these evictions. It is not configurable or changeable.&lt;/p&gt;
&lt;/diskstore&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Build Js for Stand-alone Using</title>
   <link href="/2016/10/13/Build-JS"/>
   <updated>2016-10-13T00:00:00+09:00</updated>
   <id>/2016/10/13/Build-JS</id>
   <content type="html">&lt;h2&gt;Create the JS which can do something when load the js&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(function(win) {
    // define the object to display the button
    var objectA = function() {          &lt;br /&gt;
    };
    objectA.prototype = {
            display: function() {
                alert(“You have done something”);
            }
    };
    var objecta = new objectA();
    objecta.display()
})(window);&lt;/p&gt;

&lt;p&gt;&amp;lt;/code&amp;gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Learning Spring</title>
   <link href="/2016/10/07/Leanring_Spring"/>
   <updated>2016-10-07T00:00:00+09:00</updated>
   <id>/2016/10/07/Leanring_Spring</id>
   <content type="html">&lt;p&gt;Create a scheduled task
@Scheduled(fixedRate = 5000)
	the scheduled annotation defines when a particular method runs. NOTE: THis example uses fixedRate, which specifies the interval
between method invocations measured from the start time of each invocation. There are other options, like fixedDelay, which specifies
the interval betwween invocations measured from the comletion of the task. You can also use @Scheduled(cron=”. . .”) expressions from
more sophisticated task scheduling&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Detect the device type
	The way to detect the device type is to including the Spring Mobile dependency, by including the dependency, spring boot configur
-es a DeviceResolverHandlerInterceptor and DevicehandlerMethodArgumentResolver automatically. DeviceResolverHandlerInterceptor examin
-es the User_Agent header in the incoming request, and based on the header value, determines whether the request is coming from a nor
-mal (destop) browser, or a table browser, the DeviceHandlerMethodArgumentResolver allows Spring MVC to use the resolved Device objec
-t in a controller method.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Spring Security</title>
   <link href="/2016/10/05/spring-security"/>
   <updated>2016-10-05T00:00:00+09:00</updated>
   <id>/2016/10/05/spring-security</id>
   <content type="html">&lt;h2&gt;1. Http Security&lt;/h2&gt;
&lt;p&gt;HttpSecurity is used to do the access controll for Web Application, it can helps to prevent information leaks&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3&gt;1.1 Authorize Requests&lt;/h3&gt;
&lt;p&gt;We can specify custom reuqirments for our URL by adding multiple children to http.authorizeRequests()&lt;/p&gt;

&lt;h2&gt;Core components&lt;/h2&gt;
&lt;p&gt;SecurityContextHolder, SecurityContext, Authentication. The most fundamental object is SecurityContextHolder. This is where we store details of the
present security context of the application, which includes details of the principal currently using the
application. The detail information can be get by the following method
((UserDetails)SecurityContextHolder.getContext().getAuthentication().getPrincipal()).getUsername();&lt;/p&gt;
&lt;h3&gt;Sumarry&lt;/h3&gt;
&lt;p&gt;• SecurityContextHolder, to provide access to the SecurityContext.
• SecurityContext, to hold the Authentication and possibly request-specific security
information.
• Authentication, to represent the principal in a Spring Security-specific manner.
• GrantedAuthority, to reflect the application-wide permissions granted to a principal.
• UserDetails, to provide the necessary information to build an Authentication object from your
application’s DAOs or other source of security data.
• UserDetailsService, to create a UserDetails when passed in a String-based username (or
certificate ID or the like).&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Install Mysql on Windows</title>
   <link href="/2016/10/04/Install-Mysql-On-Windows"/>
   <updated>2016-10-04T00:00:00+09:00</updated>
   <id>/2016/10/04/Install-Mysql-On-Windows</id>
   <content type="html">&lt;h2&gt;1. Unzip the uninstall file&lt;/h2&gt;
&lt;p&gt;In this step the data folder is not exist for mysql-5.7.11-64.&lt;/p&gt;

&lt;h2&gt;2. Copy the ini file and rename it to my.ini&lt;/h2&gt;
&lt;p&gt;In this step we will create the config file&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2&gt;3. Start mysql&lt;/h2&gt;
&lt;p&gt;We can use the commend of “mysqld –console” to start the mysql and check the error.
  another command is “mysqld –defaults-file=”**/my.ini” –init-file=D:\Tool\006.mysql\mysql-init.txt –console”&lt;/p&gt;
&lt;h3&gt;Note. get the error of &quot;The innodb_system data file &#39;ibdata1&#39; must be writable&quot;&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;End the process of mysqld in Windows Task Manager&lt;/li&gt;
  &lt;li&gt;Delete the file of ib_logfile0 and ib_logfile1&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;4. Connect mysql&lt;/h2&gt;
&lt;p&gt;The command is “mysql -u root -p”, then it will remind you to enter the password, just enter.&lt;/p&gt;

&lt;h2&gt;5. install mysql as a service&lt;/h2&gt;
&lt;p&gt;mysqld –install&amp;lt;/br&amp;gt;
net start mysql&amp;lt;/br&amp;gt;
net stop mysql&amp;lt;/br&amp;gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Design Database</title>
   <link href="/2016/09/05/Database_Design"/>
   <updated>2016-09-05T00:00:00+09:00</updated>
   <id>/2016/09/05/Database_Design</id>
   <content type="html">&lt;p&gt;1、 Overview
	对于数据库而言， 在日常开发中需要注意两块， 数据结构的设计和索引的优化， 这两块是影响我们最终数据库的数据结构和性能关键地方，自然也是耗费我们精力最多的地方。
本文主要包括数据库设计中的一般性原则和优化手段。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;2、 Scheme Design Rule
	范式理论是关系型数据库的黄金法则， 它提供了数据化的理论基础， 有效的保证了数据的一致性。
	数据库的范式后很多种， 第一、二、三范式， 还有BC范式&lt;/p&gt;

&lt;p&gt;2.1、第一范式(1NF, First Normal Form)
	第一范式要求实体集或关系集的属性必须是唯一的， 原子的。 否则就违反了第一范式。第一范式主要是为了避免数据结构的复杂多样性， 使得上层数据操作的可抽象性和数据一致性遭到破坏
	第一范式是关系型数据库的基本要求， 满足第一范式的数据库不应定是好的数据库， 不满足第一范式的数据库一定不是关系型数据库
	例如： 职工号、姓名、电话号码组成一个表， 这个例子不满足一个职工可能有多个电话号，&lt;/p&gt;

&lt;p&gt;2，2、 第二范式
	第二范式要求数据表中的非主键属性必须和主键有完全依赖关系（特别注意当存在联合主键的时候， 容易产生数据冗余的现象）
	例如： 选课关系表中有学号，课程号， 分数， 学分； 其中学分只依赖于课程号这个主键中的一部分&lt;/p&gt;

&lt;p&gt;2.3、 第三范式
	要求数据表中的非主属性必须独立于其他非主属性， 不能存在函数依赖的关系。
	例如： 学生表有学号、名字、系号、系名字、系地址， 其中系的地址和名字并不独立存在， 而是依赖于系号这个非主属性&lt;/p&gt;

&lt;p&gt;2.4、 BC范式
	简单解释就是说必须在满足第一范式的基础上满足第二范式和第三范式&lt;/p&gt;

&lt;p&gt;3、	反范式设计
	反范式设计的主要目的是提高数据库性能&lt;/p&gt;

&lt;p&gt;3.1、 数据冗余
	例如： 当存在数以亿计的用户时，为了提高用户login的效率就可以考虑把登录ID和用户的基本信息存放在俩个表里， 因为当用户登录的时候是不会去访问用户的基本信息， 它只需要验证用户的登录ID和密码。&lt;/p&gt;

&lt;p&gt;3.2、 去关联化
	在数据库访问中会经常用到Join这个关键字， 其作用就是将两张表拼接， 然后过滤符合条件的记录， 拼接的过程采用的是笛卡尔积的形式， 在mysql中， Join的实现方式是Nested Join Loop， 以驱动表结果集
为基础数据进行循环，有点类似编程语言中的双层循环。 根据Join实现的方式来看， 表间的Join是非常耗时耗力的，特别是当其中一张表或者两张表存在大量数据的时候， 所以我们在做Scheme设计的时候尽量避免使用
Join， 通过一定的字段合并或数据冗余来将这种需求降到最低&lt;/p&gt;

&lt;p&gt;3.3、 去一致性约束
	在分布式数据库中一致性体现在在不同的节点中的数据是否是相等的，一致性还可以分为数据库外部一致性和数据库内部一致性， 外部一致性通过编码的形式来保证， 内部一致性通过事务来保证。
	在数据库中， 数据的一致性非常重要， 它展现了数据是否可信， 当记录删减时往往需要去检查相关的条件是否满足， 这些都是需&lt;/p&gt;

&lt;p&gt;4、 数据库底层数据存储
	我们使用的关系型数据库虽然提供了表、字段、索引、sql等种种特性， 但是归根结底，其最底层的数据存储仍然是&amp;lt;k, V&amp;gt;格式， 比如MySQL， 其数据的存储都是有底层存储引擎来负责的， 虽然在逻辑结构上我们
看到了一张张表和其中一个个分散的字段， 但是实际上每条记录在物理存储上都是一个整体； 所谓的表结构、字段这些知识上层来维护的元数据， 对底层来说， 其实没有字段的概念就是一条条的物理记录。&lt;/p&gt;

&lt;p&gt;5、 MySQL数据库的层次结构
	MySQL虽然是一个开源数据库， 体积也远小于DB2、Oracle这些商业数据库， 但是一个RDBMS必备的结构MySQL却一样不少， 正所谓“麻雀虽小， 五脏俱全”。MySQL从上倒下可以分为三层， 第一部分为客户端，
第二部分是数据库管理系统（DBMS）， 最底层为存储引擎曾； MySQL使用独立的村春引擎， 可以方便切换， 这一点和其他数据库不同。&lt;/p&gt;

&lt;p&gt;6、 数据切分&lt;/p&gt;

&lt;p&gt;6.1、 为什么要进行数据切分
	往大了说是为了扩展系统， 支持更大的访问和并发和替换商业数据库， 减少成本， 往小了说是因为单库单表的存储能里有限。&lt;/p&gt;

&lt;p&gt;6.2、 垂直切分
	垂直切分主要是根据表中数据的业务类型， 尽量将不同业务的数据放在不同的表或者数据库中。在系统结构设计中经常会提到一个原则, 叫做高内聚、低耦合，其实这个远在在垂直切分中同样适合，
所以在做垂直切分的时候要尽量做到不同功能的表关联尽可能少。&lt;/p&gt;

&lt;p&gt;6.3、水平切分
	垂直切分主要是按照系统功能进行切分， 所以同样是有瓶颈存在的， 比如说， 某一项功能特别复杂或者数据量特别大， 很难进一步切分， 这样就不适合垂直切分了。
水平切分就是我们通常所说的分库分表，主要是将一张表中的数据按照某个字段（比如说用户id、商品id、订单id等）分散存储在多张结构相同的表中，这样访问的压力就会分散到多张表上；&lt;/p&gt;

&lt;p&gt;6.4 数据路由与合并
	当我们进行了分库分表之后，一个我们不得不面对的问题就是sql的路由。当我们将数据分散存储在诸如名为test_0000、test_0001的分表中时，我们会发现，必须要对原来的程序代码或数据库进行相应的改造
否则程序将找不到正确的库或表；这种情况下，通常的解决方案有三种：&lt;/p&gt;

&lt;p&gt;6.4.1 修改程序
	这种方案，只需将程序里涉及到数据库读写的代码按照分表逻辑进行改造即可，技术上比较简单，不需要额外的软件或者是技术的支持；缺点是对业务代码侵入性强，可能涉及到多个地方的修改，工作量较大，
而且后期的修改和维护成本也比较高。&lt;/p&gt;

&lt;p&gt;6.4.2 修改数据库
	这种方法对程序透明，是的上层业务逻辑不需要考虑分库分表的读写规则，应用代码可以保持不变；
缺点是需要修改数据库系统，或者以模块、插件等形式对数据库进行增强，开发成本和后期维护成本都很高，部分商业数据库根本无法自行修改。&lt;/p&gt;

&lt;p&gt;7、 数据库设计中值得注意的地方
	1、不能使用无效的名称， 数据库管理系统不允许SQL中的保留字作为名称存在的
	2、列的宽度不够， 使用英语以外的语言时，一定要注意编码
		例1， 比较“I like that book!” 和 “I &lt;b&gt;like&lt;/b&gt; that book!” 一个是17字符， 另一个是24字符， 但是显示在画面上的可能都只是“I like that book”&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	在设置了字段的长度之后， 一定要注意编码格式
	例2， 在Oracle中varchar类型被限制了4000字节， 那么这就是一个强限制，任何方法都没有办法通过这个限制。因此如果你定义了一列是varchar(3000 char)， 那么就意味这它可以存3000个字符，
假如3000个字符超过了4000字节（汉字的情况下就会出现）， insert 或者 update 就会被拒绝。
3、恰当地添加索引， 使用索引能够大大的提高数据库检索的效率。
	在创建索引是要注意， 索引并不是并不是会被一直用到； 数据库如果计算出使用索引所耗费的时间长于全表扫描的时间， 将不会是用索引
	还有就是创建索引之后， Insert 和 Delete 会变慢，
	有时候还需要优化数据库的查询， 而不是优化数据库的结构
	不是每一个性能问题都能通过建立索引解决的， 还有很多其他的方式， 例如，调优数据库参数和缓冲区大小，调优数据库连接池大小或者线程池大小，调整数据库事务隔离级别，在夜间安排批量删除，避免不必要的锁表，
4、时区设置
5、缺少审计和跟踪
	如果有人删除或者修改了一些重要数据，可在3个月之后才被发现，发生了什么事情？我认为我们遇到了严重的问题。
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 
</feed>
